---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Service Watchdog EC2 instance'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    ConstraintDescription: Must be a valid EC2 instance type.
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance (Ubuntu 16.04)
    Type : String
    Default: ami-6e1a0117
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcID:
    Description: VPC for security group
    Type: AWS::EC2::VPC::Id
  SubnetID:
    Description: Public subnet in which to launch an EC2
    Type: AWS::EC2::Subnet::Id
  AvailabilityZone:
    Description: Availability Zone into which instance will launch
    Type: AWS::EC2::AvailabilityZone::Name

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: InstanceAMI
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - Ref: InstanceSecurityGroup
          SubnetId:
            Ref: SubnetID
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           apt-get update -y
           apt-get install -y python-pip
           easy_install --script-dir /opt/aws/bin  https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_setup-service-watchdog
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: |
                systemctl start cfn-hup.service
        02_setup-service-watchdog:
          files:
             "/var/log/test_service.log":
                content: |
                  Dec 27 00:01:30 ip-10-0-5-224 worker-tasks: [2019-12-27 00:01:30,710: ERROR/MainProcess] Error in timer: TimeoutError('Timeout reading from socket',)\nTraceback (most recent call last):\n
                  Dec 27 00:01:30 ip-10-0-5-224 test-tasks: [2019-12-27 00:01:30,710: ERROR/MainProcess] Error in timer: TimeoutError('Timeout reading from socket',)\nTraceback (most recent call last):\n
             "/lib/systemd/system/service_watchdog.service":
                content: |
                  [Unit]
                  Description=Service Watchdog
                  [Service]
                  Type=simple
                  ExecStart=/opt/service_watchdog/service_watchdog.sh
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
             "/opt/service_watchdog/service_watchdog.cfg":
                content: |
                  # Log file path to parse
                  log_file="/var/log/test_service.log"
                  # String to search
                  search_string="Timeout reading from socket"
             "/opt/service_watchdog/service_watchdog.sh":
                content: |
                  #!/bin/bash

                  usage="$(basename "$0") [-h] [-c config_file] -- watchdog for service restart if string is found in specified log file

                  where:
                      -h  show this help text
                      -c  config file path (default: service_watchdog.cfg)"

                  # Default config path
                  CONFIG_FILE="service_watchdog.cfg"

                  while getopts ':hc:' option; do
                    case "$option" in
                      h) echo "$usage"
                         exit
                         ;;
                      c) CONFIG_FILE=$OPTARG
                         ;;
                      :) printf "Missing argument for -%s\n" "$OPTARG" >&2
                         echo "$usage" >&2
                         exit 1
                         ;;
                      \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
                         echo "$usage" >&2
                         exit 1
                         ;;
                    esac
                  done
                  shift $((OPTIND - 1))

                  # Getting watchdog parameters
                  if [ -f "$CONFIG_FILE" ]; then
                    source $CONFIG_FILE
                  else
                    echo "Config file $CONFIG_FILE doesn't exist!"
                    exit 2
                  fi

                  # If missing parameters, then exiting and logging about it
                  if [ -z "$log_file" ]; then
                    echo "Log file path is not specified in config file!"
                    exit 3
                  elif [ -z "$search_string" ]; then
                    echo "Search string is not specified in config file!"
                    exit 4
                  fi

                  # Checking if log file exists
                  if [ ! -f "$log_file" ]; then
                    echo "$log_file log file doesn't exist!"
                    exit 5
                  fi

                  # Parsing each new log line for search string occurrence
                  tail -n1 -f $log_file | while read l
                    do
                      if [[ "$l" == *"$search_string"* ]]; then
                        SERVICE=$(echo $l | awk '{print $5}' | sed 's/.$//')
                        # Restarting the service
                        echo "Service $SERVICE will be restarted."
                        systemctl restart backend@$SERVICE.service
                        RESULT=$?
                        if $RESULT; then
                          echo "Service $SERVICE was restarted."
                        else
                          echo "Service $SERVICE restart failed!"
                        fi
                      fi
                    done
            02enable_service_watchdog:
              command: |
                systemctl enable service_watchdog.service
            03start_service_watchdog:
              command: |
                systemctl start service_watchdog.service
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId:
        Ref: VpcID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: SSHLocation
